{"ast":null,"code":"var _jsxFileName = \"/home/someone/kucoin/tesnet20_08/amm-front/src/ThemeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ThemeProvider as SCThemeProvider } from 'styled-components';\nimport { light, dark } from '@pancakeswap-libs/uikit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CACHE_KEY = 'IS_DARK';\nconst ThemeContext = /*#__PURE__*/React.createContext({\n  isDark: false,\n  toggleTheme: () => null\n});\n\nconst ThemeContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY);\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false;\n  });\n  const handleSetup = useCallback(event => {\n    if (event && event.data && typeof event.data === \"string\" && event.data.startsWith(\"[iFrameSizer]message:\")) {\n      const dataStr = event.data.substring(\"[iFrameSizer]message:\".length);\n      const data = JSON.parse(dataStr);\n      setIsDark(() => data.isDark);\n    }\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"message\", handleSetup);\n    return () => {\n      window.removeEventListener('message', handleSetup);\n    };\n  }, [handleSetup]);\n\n  const toggleTheme = () => {\n    setIsDark(prevState => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState));\n      return !prevState;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDark,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(SCThemeProvider, {\n      theme: isDark ? dark : light,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeContextProvider, \"nfBI6nMReLGjUCtiI0k/y7Vdrcw=\");\n\n_c = ThemeContextProvider;\nexport { ThemeContext, ThemeContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["/home/someone/kucoin/tesnet20_08/amm-front/src/ThemeContext.tsx"],"names":["React","useCallback","useEffect","useState","ThemeProvider","SCThemeProvider","light","dark","CACHE_KEY","ThemeContext","createContext","isDark","toggleTheme","ThemeContextProvider","children","setIsDark","isDarkUserSetting","localStorage","getItem","JSON","parse","handleSetup","event","data","startsWith","dataStr","substring","length","window","addEventListener","removeEventListener","prevState","setItem","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,aAAa,IAAIC,eAA1B,QAAiD,mBAAjD;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,yBAA5B;;AAEA,MAAMC,SAAS,GAAG,SAAlB;AAOA,MAAMC,YAAY,gBAAGT,KAAK,CAACU,aAAN,CAAsC;AAAEC,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,WAAW,EAAE,MAAM;AAApC,CAAtC,CAArB;;AAEA,MAAMC,oBAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvD,QAAM,CAACH,MAAD,EAASI,SAAT,IAAsBZ,QAAQ,CAAC,MAAM;AACzC,UAAMa,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqBV,SAArB,CAA1B;AACA,WAAOQ,iBAAiB,GAAGG,IAAI,CAACC,KAAL,CAAWJ,iBAAX,CAAH,GAAmC,KAA3D;AACD,GAHmC,CAApC;AAKA,QAAMK,WAAW,GAAGpB,WAAW,CAACqB,KAAK,IAAE;AACrC,QAAGA,KAAK,IAAIA,KAAK,CAACC,IAAf,IAAuB,OAAOD,KAAK,CAACC,IAAb,KAAsB,QAA7C,IAAyDD,KAAK,CAACC,IAAN,CAAWC,UAAX,CAAsB,uBAAtB,CAA5D,EAA2G;AACzG,YAAMC,OAAO,GAAGH,KAAK,CAACC,IAAN,CAAWG,SAAX,CAAqB,wBAAwBC,MAA7C,CAAhB;AACA,YAAMJ,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWK,OAAX,CAAb;AACAV,MAAAA,SAAS,CAAC,MAAIQ,IAAI,CAACZ,MAAV,CAAT;AACD;AACF,GAN8B,EAM5B,EAN4B,CAA/B;AAOAT,EAAAA,SAAS,CAAC,MAAI;AACZ0B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,WAAnC;AACA,WAAO,MAAM;AACXO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCT,WAAtC;AACD,KAFD;AAGD,GALQ,EAKN,CAACA,WAAD,CALM,CAAT;;AAOA,QAAMT,WAAW,GAAG,MAAM;AACxBG,IAAAA,SAAS,CAAEgB,SAAD,IAAoB;AAC5Bd,MAAAA,YAAY,CAACe,OAAb,CAAqBxB,SAArB,EAAgCW,IAAI,CAACc,SAAL,CAAe,CAACF,SAAhB,CAAhC;AACA,aAAO,CAACA,SAAR;AACD,KAHQ,CAAT;AAID,GALD;;AAOA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEpB,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA9B;AAAA,2BACE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAED,MAAM,GAAGJ,IAAH,GAAUD,KAAxC;AAAA,gBAAgDQ;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhCD;;GAAMD,oB;;KAAAA,oB;AAkCN,SAASJ,YAAT,EAAuBI,oBAAvB","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nexport interface ThemeContextType {\n  isDark: boolean;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = React.createContext<ThemeContextType>({ isDark: false, toggleTheme: () => null })\n\nconst ThemeContextProvider: React.FC = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const handleSetup = useCallback(event=>{\n    if(event && event.data && typeof event.data === \"string\" && event.data.startsWith(\"[iFrameSizer]message:\")){\n      const dataStr = event.data.substring(\"[iFrameSizer]message:\".length);\n      const data = JSON.parse(dataStr);\n      setIsDark(()=>data.isDark);\n    }\n  }, []);\n  useEffect(()=>{\n    window.addEventListener(\"message\", handleSetup);\n    return () => {\n      window.removeEventListener('message', handleSetup);\n    };\n  }, [handleSetup]);\n\n  const toggleTheme = () => {\n    setIsDark((prevState: any) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n"]},"metadata":{},"sourceType":"module"}